OOP [- Object oriented programming  : là phương pháp lập trình đưa các đối tượng có thực vào trong lập trình
     - Object orientated programming]   |_> [Lập trình tạo ra các class, object]
- Class: lớp -> có thể hiểu nó là 1 kiểu dữ liệu do user định nghĩa
    + Chứa những thông tin  và hành động của 1 đối tượng
                [Thuộc tính]  [Phương thức]
    + Tạo 1 class: 'Access Modifier' 'class' 'tên class'{
        thuộc tính |'public' int 'tên thuộc tính'|;
        Phương thức|'public' void 'tên phương thức'{block code}|;
    }
        + Tạo 1 object cho 1 class: 'tên class' 'tên object' = new 'tên class'()
- Object: Là những thứ xuất hiện trong đời thực
* Mối QH: Class đc thể hiện là 1 tập hợp các object có những thuộc tính, phương thức giống nhau
Truy xuất các thuộc tính, phương thức của object:
    'tên object'.'thuộc tính'
    'tên object'.'phương thức'
Constructor: là 1 phương thức đặc biệt dùng để tạo đối tượng
- Chia làm 2 loại:
    + Constructor có tham số  ]
                              ] --> có n[tiến đến vô cực] constructor
    + Constructor k có tham số]
*Đặc điểm:
   - Luôn tồn tại 1 constructor trong class
   - Có tên trùng với class
* Có 4 tính chất:
     1. Kế thừa:có 2 class kế thừa nhau,
     class ĐƯỢC KẾ THỪA(CLASS CHA) có thuộc tính phương thức nào thì class KẾ THỪA(CLASS CON) sẽ có phương thức thuộc tính đấy
     nhưng class đc kế thừa sẽ k có phương thức thuộc tính của class kế thừa
     có 2 loại kế thừa:
        1. Đơn kế thừa:là class cha có 'n' class con. Class con có 1 class cha
        2. Đa kế thừa: class cha có 'n' class con. Class con cx có 'n' class cha
     2. Đa hình:
        + Overloading : nạp chồng [trong 1 class tồn tại những method có tên == nhau nhưng tham số != nhau]
        VD: public void input_person(){
                    System.out.println(input);
                }
                public void input_person(String ten, String gioiTinh, String ngaySinh){
                    System.out.println(input);
                }
        + Overriding : Ghi đè [trong 2 class cha con tồn tại 1 phương thức giống nhau về kiểu dữ liệu tên phương thức và tham số]
        VD:  @Override
                public String toString() {
                    return "Thong tin sinh vien: " +
                            "Tên: " + ten + '\n' +
                            "Giới tính: " + gioiTinh + '\n' +
                            "Địa chỉ: " + diaChi + '\n' +
                            "Ngày sinh: " + ngaySinh + '\n' +
                            "Mã sinh viên: " + maSV + '\n' +
                            "Email: " + email + '\n' +
                            "Điêm trung bình" + TB + '\n' +"";
                }
     3. Đóng gói: phạm vi có thể dử dụng của class. method. atribute
        - Access modifier: + Public: Everywhere
                           + default: Just in Package
                           + Protected: In class, package, out package but in subclass(class con)
                           + Private: Just in same class
                             * Thuộc tính có private thì có thể dùng getter, setter để use
                             * Phương thức mà có private ==> use tring class
     4. Trừu tượng: để xây dụng lên những thứ chung nhất của chương trình (khung)
                   => tùy theo từng class sẽ triển khai những thứ chung đó
        - Abstract: có 2 loại
          Bán trừu tượng:
                    * Abstract class:
            + chứa những thuộc tính + những phương thức bình thường + những phương thức trừu tượng (abstract method)
            + Không thể tạo đối dtượng cho abstract class
            + Abstract class có thể kế thừa
            + Khai báo:
                'Access modifier' abstract class 'tên class'{
                        'thuộc tính';
                        'method thông thường';
                        abstract method;
                }
                    * Abstract method:
            + bắt buộc phải override
            + khai báo:
                'Access modifier' abstract 'kiểu dữ liệu' 'tên method' '(tham số)'
          Trừu tượng toàn phần (Interface): chỉ chứa abstract class
            + tạo interface:
                'Access modifier' interface 'tên interface'{
                        phương thức trừu tượng;
                }
        Class => chỉ extends 1 class
        Interface => implements
            Interface có thể implements 1 hoặc nhiều interface
            class có thể implements 1 hoặc nhiều interface